//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21554848
// Cuda compilation tools, release 8.0, V8.0.61
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_35
.address_size 64

	// .globl	_Z22sphere_array_intersecti
.global .align 1 .b8 particle_buffer[1];
.global .align 1 .b8 sphere_buffer[1];
.global .align 1 .b8 color_buffer[1];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 8 .b8 shading_color[12];
.global .align 4 .b8 ray[36];
.global .align 1 .b8 posBufferIds[1];
.global .align 1 .b8 colBufferIds[1];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13shading_colorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13shading_colorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13shading_colorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic13shading_colorE[24] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 99, 111, 108, 111, 114, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13shading_colorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z22sphere_array_intersecti(
	.param .u32 _Z22sphere_array_intersecti_param_0
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<58>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<8>;


	ld.param.s32 	%rd3, [_Z22sphere_array_intersecti_param_0];
	mov.u64 	%rd7, particle_buffer;
	cvta.global.u64 	%rd2, %rd7;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 16;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd6, %rd6, %rd6);
	// inline asm
	ld.global.f32 	%f10, [ray];
	ld.v4.f32 	{%f11, %f12, %f13, %f14}, [%rd1];
	sub.f32 	%f1, %f11, %f10;
	ld.global.f32 	%f18, [ray+4];
	sub.f32 	%f2, %f12, %f18;
	ld.global.f32 	%f19, [ray+8];
	sub.f32 	%f3, %f13, %f19;
	ld.global.f32 	%f20, [ray+12];
	ld.global.f32 	%f21, [ray+16];
	mul.f32 	%f22, %f2, %f21;
	fma.rn.f32 	%f23, %f1, %f20, %f22;
	ld.global.f32 	%f24, [ray+20];
	fma.rn.f32 	%f4, %f3, %f24, %f23;
	mul.f32 	%f25, %f4, %f4;
	fma.rn.f32 	%f26, %f14, %f14, %f25;
	mul.f32 	%f27, %f2, %f2;
	fma.rn.f32 	%f28, %f1, %f1, %f27;
	fma.rn.f32 	%f29, %f3, %f3, %f28;
	sub.f32 	%f6, %f26, %f29;
	setp.leu.f32	%p1, %f6, 0f00000000;
	@%p1 bra 	BB0_5;

	sqrt.rn.f32 	%f7, %f6;
	add.f32 	%f30, %f4, %f7;
	// inline asm
	call (%r3), _rt_potential_intersection, (%f30);
	// inline asm
	setp.eq.s32	%p2, %r3, 0;
	@%p2 bra 	BB0_3;

	ld.global.f32 	%f31, [ray+12];
	mul.f32 	%f32, %f30, %f31;
	ld.global.f32 	%f33, [ray+16];
	mul.f32 	%f34, %f30, %f33;
	ld.global.f32 	%f35, [ray+20];
	mul.f32 	%f36, %f30, %f35;
	sub.f32 	%f37, %f32, %f1;
	sub.f32 	%f38, %f34, %f2;
	sub.f32 	%f39, %f36, %f3;
	rcp.rn.f32 	%f40, %f14;
	mul.f32 	%f41, %f40, %f39;
	mul.f32 	%f42, %f38, %f40;
	mul.f32 	%f43, %f37, %f40;
	st.global.v2.f32 	[geometric_normal], {%f43, %f42};
	st.global.f32 	[geometric_normal+8], %f41;
	st.global.v2.f32 	[shading_normal], {%f43, %f42};
	st.global.f32 	[shading_normal+8], %f41;
	mov.u32 	%r5, 0;
	// inline asm
	call (%r4), _rt_report_intersection, (%r5);
	// inline asm

BB0_3:
	sub.f32 	%f44, %f4, %f7;
	// inline asm
	call (%r6), _rt_potential_intersection, (%f44);
	// inline asm
	setp.eq.s32	%p3, %r6, 0;
	@%p3 bra 	BB0_5;

	ld.global.f32 	%f45, [ray+12];
	mul.f32 	%f46, %f44, %f45;
	ld.global.f32 	%f47, [ray+16];
	mul.f32 	%f48, %f44, %f47;
	ld.global.f32 	%f49, [ray+20];
	mul.f32 	%f50, %f44, %f49;
	sub.f32 	%f51, %f46, %f1;
	sub.f32 	%f52, %f48, %f2;
	sub.f32 	%f53, %f50, %f3;
	rcp.rn.f32 	%f54, %f14;
	mul.f32 	%f55, %f54, %f53;
	mul.f32 	%f56, %f52, %f54;
	mul.f32 	%f57, %f51, %f54;
	st.global.v2.f32 	[geometric_normal], {%f57, %f56};
	st.global.f32 	[geometric_normal+8], %f55;
	st.global.v2.f32 	[shading_normal], {%f57, %f56};
	st.global.f32 	[shading_normal+8], %f55;
	mov.u32 	%r8, 0;
	// inline asm
	call (%r7), _rt_report_intersection, (%r8);
	// inline asm

BB0_5:
	ret;
}

	// .globl	_Z9intersecti
.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<47>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<15>;


	ld.param.s32 	%rd10, [_Z9intersecti_param_0];
	mov.u64 	%rd14, sphere_buffer;
	cvta.global.u64 	%rd3, %rd14;
	mov.u32 	%r3, 1;
	mov.u32 	%r4, 32;
	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.v4.f32 	{%f14, %f15, %f16, %f17}, [%rd2];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd3, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.global.f32 	%f21, [ray];
	sub.f32 	%f2, %f21, %f14;
	ld.global.f32 	%f22, [ray+4];
	sub.f32 	%f3, %f22, %f15;
	ld.global.f32 	%f23, [ray+8];
	sub.f32 	%f4, %f23, %f16;
	ld.global.f32 	%f7, [ray+20];
	ld.global.f32 	%f5, [ray+12];
	ld.global.f32 	%f6, [ray+16];
	mul.f32 	%f24, %f3, %f6;
	fma.rn.f32 	%f25, %f2, %f5, %f24;
	fma.rn.f32 	%f8, %f4, %f7, %f25;
	mul.f32 	%f26, %f3, %f3;
	fma.rn.f32 	%f27, %f2, %f2, %f26;
	fma.rn.f32 	%f28, %f4, %f4, %f27;
	mul.f32 	%f29, %f17, %f17;
	sub.f32 	%f30, %f28, %f29;
	mul.f32 	%f31, %f8, %f8;
	sub.f32 	%f9, %f31, %f30;
	setp.leu.f32	%p1, %f9, 0f00000000;
	@%p1 bra 	BB1_3;

	ld.v4.f32 	{%f33, %f34, %f35, %f36}, [%rd8+16];
	sqrt.rn.f32 	%f37, %f9;
	neg.f32 	%f38, %f8;
	sub.f32 	%f39, %f38, %f37;
	add.f32 	%f32, %f39, 0f00000000;
	// inline asm
	call (%r5), _rt_potential_intersection, (%f32);
	// inline asm
	setp.eq.s32	%p2, %r5, 0;
	@%p2 bra 	BB1_3;

	fma.rn.f32 	%f40, %f5, %f32, %f2;
	fma.rn.f32 	%f41, %f6, %f32, %f3;
	fma.rn.f32 	%f42, %f7, %f32, %f4;
	rcp.rn.f32 	%f43, %f17;
	mul.f32 	%f44, %f42, %f43;
	mul.f32 	%f45, %f41, %f43;
	mul.f32 	%f46, %f40, %f43;
	st.global.v2.f32 	[geometric_normal], {%f46, %f45};
	st.global.f32 	[geometric_normal+8], %f44;
	st.global.v2.f32 	[shading_normal], {%f46, %f45};
	st.global.f32 	[shading_normal+8], %f44;
	st.global.v2.f32 	[shading_color], {%f33, %f34};
	st.global.f32 	[shading_color+8], %f35;
	mov.u32 	%r7, 0;
	// inline asm
	call (%r6), _rt_report_intersection, (%r7);
	// inline asm

BB1_3:
	ret;
}

	// .globl	_Z16robust_intersecti
.visible .entry _Z16robust_intersecti(
	.param .u32 _Z16robust_intersecti_param_0
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<71>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<15>;


	ld.param.s32 	%rd10, [_Z16robust_intersecti_param_0];
	mov.u64 	%rd14, sphere_buffer;
	cvta.global.u64 	%rd3, %rd14;
	mov.u32 	%r3, 1;
	mov.u32 	%r4, 32;
	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.v4.f32 	{%f20, %f21, %f22, %f23}, [%rd2];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd3, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.global.f32 	%f27, [ray];
	sub.f32 	%f2, %f27, %f20;
	ld.global.f32 	%f28, [ray+4];
	sub.f32 	%f3, %f28, %f21;
	ld.global.f32 	%f29, [ray+8];
	sub.f32 	%f4, %f29, %f22;
	ld.global.f32 	%f7, [ray+20];
	ld.global.f32 	%f5, [ray+12];
	ld.global.f32 	%f6, [ray+16];
	mul.f32 	%f30, %f3, %f6;
	fma.rn.f32 	%f31, %f2, %f5, %f30;
	fma.rn.f32 	%f8, %f4, %f7, %f31;
	mul.f32 	%f32, %f3, %f3;
	fma.rn.f32 	%f33, %f2, %f2, %f32;
	fma.rn.f32 	%f34, %f4, %f4, %f33;
	mul.f32 	%f9, %f23, %f23;
	sub.f32 	%f35, %f34, %f9;
	mul.f32 	%f36, %f8, %f8;
	sub.f32 	%f10, %f36, %f35;
	setp.leu.f32	%p1, %f10, 0f00000000;
	@%p1 bra 	BB2_6;

	ld.v4.f32 	{%f38, %f39, %f40, %f41}, [%rd8+16];
	sqrt.rn.f32 	%f42, %f10;
	neg.f32 	%f43, %f8;
	sub.f32 	%f14, %f43, %f42;
	abs.f32 	%f44, %f14;
	mul.f32 	%f45, %f23, 0f41200000;
	mov.f32 	%f70, 0f00000000;
	setp.leu.f32	%p2, %f44, %f45;
	@%p2 bra 	BB2_4;

	ld.global.f32 	%f47, [ray+12];
	ld.global.f32 	%f48, [ray+16];
	ld.global.f32 	%f49, [ray+20];
	fma.rn.f32 	%f50, %f14, %f47, %f2;
	fma.rn.f32 	%f51, %f14, %f48, %f3;
	fma.rn.f32 	%f52, %f14, %f49, %f4;
	mul.f32 	%f53, %f6, %f51;
	fma.rn.f32 	%f54, %f5, %f50, %f53;
	fma.rn.f32 	%f15, %f7, %f52, %f54;
	mul.f32 	%f55, %f51, %f51;
	fma.rn.f32 	%f56, %f50, %f50, %f55;
	fma.rn.f32 	%f57, %f52, %f52, %f56;
	sub.f32 	%f58, %f57, %f9;
	mul.f32 	%f59, %f15, %f15;
	sub.f32 	%f16, %f59, %f58;
	setp.leu.f32	%p3, %f16, 0f00000000;
	@%p3 bra 	BB2_4;

	sqrt.rn.f32 	%f60, %f16;
	neg.f32 	%f61, %f15;
	sub.f32 	%f70, %f61, %f60;

BB2_4:
	add.f32 	%f62, %f14, %f70;
	// inline asm
	call (%r5), _rt_potential_intersection, (%f62);
	// inline asm
	setp.eq.s32	%p4, %r5, 0;
	@%p4 bra 	BB2_6;

	fma.rn.f32 	%f63, %f5, %f62, %f2;
	fma.rn.f32 	%f64, %f6, %f62, %f3;
	fma.rn.f32 	%f65, %f7, %f62, %f4;
	rcp.rn.f32 	%f66, %f23;
	mul.f32 	%f67, %f65, %f66;
	mul.f32 	%f68, %f64, %f66;
	mul.f32 	%f69, %f63, %f66;
	st.global.v2.f32 	[geometric_normal], {%f69, %f68};
	st.global.f32 	[geometric_normal+8], %f67;
	st.global.v2.f32 	[shading_normal], {%f69, %f68};
	st.global.f32 	[shading_normal+8], %f67;
	st.global.v2.f32 	[shading_color], {%f38, %f39};
	st.global.f32 	[shading_color+8], %f40;
	mov.u32 	%r7, 0;
	// inline asm
	call (%r6), _rt_report_intersection, (%r7);
	// inline asm

BB2_6:
	ret;
}

	// .globl	_Z6boundsiPf
.visible .entry _Z6boundsiPf(
	.param .u32 _Z6boundsiPf_param_0,
	.param .u64 _Z6boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd3, [_Z6boundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z6boundsiPf_param_0];
	mov.u64 	%rd10, sphere_buffer;
	cvta.global.u64 	%rd5, %rd10;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 32;
	mov.u64 	%rd9, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r1, %r2, %rd6, %rd9, %rd9, %rd9);
	// inline asm
	ld.v4.f32 	{%f6, %f7, %f8, %f9}, [%rd4];
	mov.pred 	%p5, 0;
	setp.leu.f32	%p4, %f9, 0f00000000;
	@%p4 bra 	BB3_2;

	abs.f32 	%f10, %f9;
	setp.neu.f32	%p5, %f10, 0f7F800000;

BB3_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB3_4;
	bra.uni 	BB3_3;

BB3_4:
	sub.f32 	%f11, %f6, %f9;
	st.global.f32 	[%rd2], %f11;
	sub.f32 	%f12, %f7, %f9;
	st.global.f32 	[%rd2+4], %f12;
	sub.f32 	%f13, %f8, %f9;
	st.global.f32 	[%rd2+8], %f13;
	add.f32 	%f14, %f6, %f9;
	st.global.f32 	[%rd2+12], %f14;
	add.f32 	%f15, %f7, %f9;
	st.global.f32 	[%rd2+16], %f15;
	add.f32 	%f16, %f8, %f9;
	st.global.f32 	[%rd2+20], %f16;
	bra.uni 	BB3_5;

BB3_3:
	mov.u32 	%r3, 2096152002;
	st.global.u32 	[%rd2+8], %r3;
	st.global.u32 	[%rd2+4], %r3;
	st.global.u32 	[%rd2], %r3;
	mov.u32 	%r4, -51331646;
	st.global.u32 	[%rd2+20], %r4;
	st.global.u32 	[%rd2+16], %r4;
	st.global.u32 	[%rd2+12], %r4;

BB3_5:
	ret;
}

	// .globl	_Z20robust_intersect_BoBi
.visible .entry _Z20robust_intersect_BoBi(
	.param .u32 _Z20robust_intersect_BoBi_param_0
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<71>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<40>;


	ld.param.u32 	%r3, [_Z20robust_intersect_BoBi_param_0];
	mov.u64 	%rd10, posBufferIds;
	cvta.global.u64 	%rd9, %rd10;
	mov.u32 	%r4, 1;
	mov.u32 	%r5, 4;
	// inline asm
	call (%rd5, %rd6, %rd7, %rd8), _rt_buffer_get_size_64, (%rd9, %r4, %r5);
	// inline asm
	cvt.u32.u64	%r6, %rd5;
	setp.eq.s32	%p1, %r6, 0;
	@%p1 bra 	BB4_9;

	cvt.s64.s32	%rd1, %r3;
	mov.u32 	%r19, 0;
	mov.u64 	%rd11, 0;
	mov.u64 	%rd39, %rd11;

BB4_2:
	mov.u64 	%rd2, %rd39;
	// inline asm
	call (%rd12), _rt_buffer_get_64, (%rd9, %r4, %r5, %rd2, %rd11, %rd11, %rd11);
	// inline asm
	mov.u64 	%rd31, sphere_buffer;
	cvta.global.u64 	%rd19, %rd31;
	mov.u32 	%r13, 32;
	// inline asm
	call (%rd18), _rt_buffer_get_64, (%rd19, %r4, %r13, %rd1, %rd11, %rd11, %rd11);
	// inline asm
	ld.v4.f32 	{%f20, %f21, %f22, %f23}, [%rd18];
	// inline asm
	call (%rd24), _rt_buffer_get_64, (%rd19, %r4, %r13, %rd1, %rd11, %rd11, %rd11);
	// inline asm
	ld.global.f32 	%f27, [ray];
	sub.f32 	%f2, %f27, %f20;
	ld.global.f32 	%f28, [ray+4];
	sub.f32 	%f3, %f28, %f21;
	ld.global.f32 	%f29, [ray+8];
	sub.f32 	%f4, %f29, %f22;
	ld.global.f32 	%f7, [ray+20];
	ld.global.f32 	%f5, [ray+12];
	ld.global.f32 	%f6, [ray+16];
	mul.f32 	%f30, %f3, %f6;
	fma.rn.f32 	%f31, %f2, %f5, %f30;
	fma.rn.f32 	%f8, %f4, %f7, %f31;
	mul.f32 	%f32, %f3, %f3;
	fma.rn.f32 	%f33, %f2, %f2, %f32;
	fma.rn.f32 	%f34, %f4, %f4, %f33;
	mul.f32 	%f9, %f23, %f23;
	sub.f32 	%f35, %f34, %f9;
	mul.f32 	%f36, %f8, %f8;
	sub.f32 	%f10, %f36, %f35;
	setp.leu.f32	%p2, %f10, 0f00000000;
	@%p2 bra 	BB4_8;

	ld.v4.f32 	{%f38, %f39, %f40, %f41}, [%rd24+16];
	sqrt.rn.f32 	%f42, %f10;
	neg.f32 	%f43, %f8;
	sub.f32 	%f14, %f43, %f42;
	abs.f32 	%f44, %f14;
	mul.f32 	%f45, %f23, 0f41200000;
	mov.f32 	%f70, 0f00000000;
	setp.leu.f32	%p3, %f44, %f45;
	@%p3 bra 	BB4_6;

	ld.global.f32 	%f47, [ray+12];
	ld.global.f32 	%f48, [ray+16];
	ld.global.f32 	%f49, [ray+20];
	fma.rn.f32 	%f50, %f14, %f47, %f2;
	fma.rn.f32 	%f51, %f14, %f48, %f3;
	fma.rn.f32 	%f52, %f14, %f49, %f4;
	mul.f32 	%f53, %f6, %f51;
	fma.rn.f32 	%f54, %f5, %f50, %f53;
	fma.rn.f32 	%f15, %f7, %f52, %f54;
	mul.f32 	%f55, %f51, %f51;
	fma.rn.f32 	%f56, %f50, %f50, %f55;
	fma.rn.f32 	%f57, %f52, %f52, %f56;
	sub.f32 	%f58, %f57, %f9;
	mul.f32 	%f59, %f15, %f15;
	sub.f32 	%f16, %f59, %f58;
	setp.leu.f32	%p4, %f16, 0f00000000;
	@%p4 bra 	BB4_6;

	sqrt.rn.f32 	%f60, %f16;
	neg.f32 	%f61, %f15;
	sub.f32 	%f70, %f61, %f60;

BB4_6:
	add.f32 	%f62, %f14, %f70;
	// inline asm
	call (%r14), _rt_potential_intersection, (%f62);
	// inline asm
	setp.eq.s32	%p5, %r14, 0;
	@%p5 bra 	BB4_8;

	fma.rn.f32 	%f63, %f5, %f62, %f2;
	fma.rn.f32 	%f64, %f6, %f62, %f3;
	fma.rn.f32 	%f65, %f7, %f62, %f4;
	rcp.rn.f32 	%f66, %f23;
	mul.f32 	%f67, %f65, %f66;
	mul.f32 	%f68, %f64, %f66;
	mul.f32 	%f69, %f63, %f66;
	st.global.v2.f32 	[geometric_normal], {%f69, %f68};
	st.global.f32 	[geometric_normal+8], %f67;
	st.global.v2.f32 	[shading_normal], {%f69, %f68};
	st.global.f32 	[shading_normal+8], %f67;
	st.global.v2.f32 	[shading_color], {%f38, %f39};
	st.global.f32 	[shading_color+8], %f40;
	mov.u32 	%r16, 0;
	// inline asm
	call (%r15), _rt_report_intersection, (%r16);
	// inline asm

BB4_8:
	add.s32 	%r19, %r19, 1;
	cvt.u64.u32	%rd4, %r19;
	// inline asm
	call (%rd32, %rd33, %rd34, %rd35), _rt_buffer_get_size_64, (%rd9, %r4, %r5);
	// inline asm
	and.b64  	%rd38, %rd32, 4294967295;
	setp.lt.u64	%p6, %rd4, %rd38;
	mov.u64 	%rd39, %rd4;
	@%p6 bra 	BB4_2;

BB4_9:
	ret;
}


